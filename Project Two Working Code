#include <iostream>
#include <fstream>
#include <sstream>
#include <map>
#include <vector>
#include <algorithm>

using namespace std;

// Course structure to hold course details
struct Course {
    std::string courseNumber;
    string courseTitle;
    vector<string> prerequisites;
};

// Function to load courses from a file into a data structure
void loadCourses(map<string, Course>& courses) {
    string filename;
    cout << "Enter the file name: ";
    cin >> filename;
    ifstream file(filename);

    if (!file) {
        cerr << "Error opening file." << endl;
        return;
    }

    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        string courseNumber, courseTitle, prerequisite;
        ss >> courseNumber;
        getline(ss, courseTitle, '\t');

        Course course;
        course.courseNumber = courseNumber;
        course.courseTitle = courseTitle;

        while (ss >> prerequisite) {
            course.prerequisites.push_back(prerequisite);
        }

        courses[courseNumber] = course;
    }

    file.close();
    cout << "Data loaded successfully!" << endl;
}

// Function to print the course list in alphanumeric order
void printCourseList(const map<string, Course>& courses) {
    cout << "Here is a sample schedule:" << endl;
    for (const auto& entry : courses) {
        cout << entry.first << ", " << entry.second.courseTitle << endl;
    }
}

// Function to print details of a specific course
void printCourse(const map<string, Course>& courses) {
    string courseNumber;
    cout << "What course do you want to know about? ";
    cin >> courseNumber;

    auto it = courses.find(courseNumber);
    if (it != courses.end()) {
        cout << it->second.courseNumber << ", " << it->second.courseTitle << endl;
        if (!it->second.prerequisites.empty()) {
            cout << "Prerequisites: ";
            for (const string& prereq : it->second.prerequisites) {
                cout << prereq << " ";
            }
            cout << endl;
        }
    }
    else {
        cout << "Course not found." << endl;
    }
}

int main() {
    map<string, Course> courses;
    int choice;

    cout << "Welcome to the course planner." << endl;
    do {
        cout << "1. Load Data Structure." << endl;
        cout << "2. Print Course List." << endl;
        cout << "3. Print Course." << endl;
        cout << "9. Exit" << endl;
        cout << "What would you like to do? ";
        cin >> choice;

        switch (choice) {
        case 1:
            loadCourses(courses);
            break;
        case 2:
            printCourseList(courses);
            break;
        case 3:
            printCourse(courses);
            break;
        case 9:
            cout << "Thank you for using the course planner!" << endl;
            break;
        default:
            cout << choice << " is not a valid option." << endl;
        }
    } while (choice != 9);

    return 0;
}
